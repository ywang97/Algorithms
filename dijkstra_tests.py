import unittest
from bidirectional_dijkstra import bidirectional_dijkstra

tests = (
    (
        (
            [[1, 2, 3, 4], [0, 5, 6, 7], [0, 8, 9], [0], [0], [1], [1], [1], [2], [2]],
            {(0, 1): 5, (1, 0): 5, (0, 2): 1, (2, 0): 1, (0, 3): 5, (3, 0): 5, (0, 4): 9, (4, 0): 9, (1, 5): 13, (5, 1): 13, (1, 6): 5, (6, 1): 5, (1, 7): 13, (7, 1): 13, (2, 8): 12, (8, 2): 12, (2, 9): 5, (9, 2): 5},
            0,
            9,
        ),
        6,
    ),
    (
        (
            [[1, 2, 3, 4], [0, 5, 6, 7], [0, 8, 10, 9], [0, 9, 11, 6], [0, 10, 12, 7], [1, 13, 14, 15], [16, 1, 3, 14], [1, 4, 17, 15], [19, 2, 18], [2, 3], [2, 4], [3], [4], [5], [5, 6], [5, 7], [6], [7], [8], [8]],
            {(0, 1): 17, (1, 0): 17, (0, 2): 10, (2, 0): 10, (0, 3): 17, (3, 0): 17, (0, 4): 15, (4, 0): 15, (1, 5): 21, (5, 1): 21, (1, 6): 12, (6, 1): 12, (1, 7): 24, (7, 1): 24, (2, 8): 18, (8, 2): 18, (2, 10): 23, (10, 2): 23, (2, 9): 6, (9, 2): 6, (3, 9): 15, (9, 3): 15, (3, 11): 4, (11, 3): 4, (3, 6): 19, (6, 3): 19, (4, 10): 3, (10, 4): 3, (4, 12): 1, (12, 4): 1, (4, 7): 14, (7, 4): 14, (5, 13): 2, (13, 5): 2, (5, 14): 8, (14, 5): 8, (5, 15): 1, (15, 5): 1, (6, 16): 23, (16, 6): 23, (6, 14): 10, (14, 6): 10, (7, 17): 8, (17, 7): 8, (7, 15): 9, (15, 7): 9, (8, 19): 1, (19, 8): 1, (8, 18): 2, (18, 8): 2},
            0,
            19,
        ),
        29,
    ),
    (
        (
            [[1, 2, 3, 4, 5, 6], [0, 7, 8, 9, 10, 11], [0, 12, 13, 14, 15, 16], [0, 8, 13, 17, 18, 19], [0, 9, 14, 20, 21, 22], [0, 10, 15, 18, 21, 23], [0, 11, 16, 19, 22, 24], [1, 25, 26, 27, 28, 29], [1, 3], [1, 4], [1, 5], [1, 6], [2], [2, 3], [2, 4], [2, 5], [2, 6], [3], [3, 5], [3, 6], [4], [4, 5], [4, 6], [5], [6], [7], [7], [7], [7], [7]],
            {(0, 1): 18, (1, 0): 18, (0, 2): 19, (2, 0): 19, (0, 3): 23, (3, 0): 23, (0, 4): 27, (4, 0): 27, (0, 5): 20, (5, 0): 20, (0, 6): 12, (6, 0): 12, (1, 7): 19, (7, 1): 19, (1, 8): 33, (8, 1): 33, (1, 9): 14, (9, 1): 14, (1, 10): 12, (10, 1): 12, (1, 11): 14, (11, 1): 14, (2, 12): 3, (12, 2): 3, (2, 13): 29, (13, 2): 29, (2, 14): 34, (14, 2): 34, (2, 15): 16, (15, 2): 16, (2, 16): 7, (16, 2): 7, (3, 8): 31, (8, 3): 31, (3, 13): 31, (13, 3): 31, (3, 17): 15, (17, 3): 15, (3, 18): 29, (18, 3): 29, (3, 19): 8, (19, 3): 8, (4, 9): 15, (9, 4): 15, (4, 14): 17, (14, 4): 17, (4, 20): 34, (20, 4): 34, (4, 21): 27, (21, 4): 27, (4, 22): 2, (22, 4): 2, (5, 10): 6, (10, 5): 6, (5, 15): 18, (15, 5): 18, (5, 18): 25, (18, 5): 25, (5, 21): 34, (21, 5): 34, (5, 23): 21, (23, 5): 21, (6, 11): 30, (11, 6): 30, (6, 16): 12, (16, 6): 12, (6, 19): 8, (19, 6): 8, (6, 22): 34, (22, 6): 34, (6, 24): 4, (24, 6): 4, (7, 25): 7, (25, 7): 7, (7, 26): 25, (26, 7): 25, (7, 27): 35, (27, 7): 35, (7, 28): 7, (28, 7): 7, (7, 29): 8, (29, 7): 8},
            0,
            29,
        ),
        45,
    ),
    (
        (
            [[1, 2, 3, 4, 5, 6], [0, 7, 8, 9, 10, 11], [0, 12, 13, 14, 15, 16], [0, 8, 13, 17, 18, 19], [0, 9, 14, 20, 21, 22], [0, 10, 15, 18, 21, 23], [0, 11, 16, 19, 22, 24], [1, 25, 26, 27, 28, 29], [32, 1, 3, 26, 30, 31], [1, 34, 33, 4, 35, 27], [1, 34, 36, 5, 28, 31], [32, 1, 35, 37, 6, 29], [2, 38, 39], [2, 3], [2, 4], [2, 5], [2, 6], [3], [3, 5], [3, 6], [4], [4, 5], [4, 6], [5], [6], [7], [8, 7], [9, 7], [10, 7], [11, 7], [8], [8, 10], [8, 11], [9], [9, 10], [9, 11], [10], [11], [12], [12]],
            {(0, 1): 37, (1, 0): 37, (0, 2): 40, (2, 0): 40, (0, 3): 32, (3, 0): 32, (0, 4): 10, (4, 0): 10, (0, 5): 3, (5, 0): 3, (0, 6): 12, (6, 0): 12, (1, 7): 20, (7, 1): 20, (1, 8): 4, (8, 1): 4, (1, 9): 23, (9, 1): 23, (1, 10): 17, (10, 1): 17, (1, 11): 33, (11, 1): 33, (2, 12): 9, (12, 2): 9, (2, 13): 34, (13, 2): 34, (2, 14): 45, (14, 2): 45, (2, 15): 13, (15, 2): 13, (2, 16): 23, (16, 2): 23, (3, 8): 5, (8, 3): 5, (3, 13): 16, (13, 3): 16, (3, 17): 6, (17, 3): 6, (3, 18): 30, (18, 3): 30, (3, 19): 4, (19, 3): 4, (4, 9): 4, (9, 4): 4, (4, 14): 30, (14, 4): 30, (4, 20): 17, (20, 4): 17, (4, 21): 7, (21, 4): 7, (4, 22): 32, (22, 4): 32, (5, 10): 40, (10, 5): 40, (5, 15): 35, (15, 5): 35, (5, 18): 48, (18, 5): 48, (5, 21): 43, (21, 5): 43, (5, 23): 20, (23, 5): 20, (6, 11): 50, (11, 6): 50, (6, 16): 49, (16, 6): 49, (6, 19): 36, (19, 6): 36, (6, 22): 39, (22, 6): 39, (6, 24): 21, (24, 6): 21, (7, 25): 21, (25, 7): 21, (7, 26): 35, (26, 7): 35, (7, 27): 4, (27, 7): 4, (7, 28): 35, (28, 7): 35, (7, 29): 22, (29, 7): 22, (8, 32): 48, (32, 8): 48, (8, 26): 9, (26, 8): 9, (8, 30): 5, (30, 8): 5, (8, 31): 29, (31, 8): 29, (9, 34): 29, (34, 9): 29, (9, 33): 37, (33, 9): 37, (9, 35): 30, (35, 9): 30, (9, 27): 47, (27, 9): 47, (10, 34): 9, (34, 10): 9, (10, 36): 23, (36, 10): 23, (10, 28): 29, (28, 10): 29, (10, 31): 47, (31, 10): 47, (11, 32): 17, (32, 11): 17, (11, 35): 42, (35, 11): 42, (11, 37): 21, (37, 11): 21, (11, 29): 18, (29, 11): 18, (12, 38): 32, (38, 12): 32, (12, 39): 28, (39, 12): 28},
            0,
            39,
        ),
        77,
    ),
    (
        (
            [[1, 2, 3, 4, 5, 6], [0, 7, 8, 9, 10, 11], [0, 12, 13, 14, 15, 16], [0, 8, 13, 17, 18, 19], [0, 9, 14, 20, 21, 22], [0, 10, 15, 18, 21, 23], [0, 11, 16, 19, 22, 24], [1, 25, 26, 27, 28, 29], [32, 1, 3, 26, 30, 31], [1, 34, 33, 4, 35, 27], [1, 34, 36, 5, 28, 31], [32, 1, 35, 37, 6, 29], [2, 38, 39, 40, 41, 42], [2, 3, 39, 43, 44, 45], [2, 4, 40, 46, 47, 48], [2, 5, 41, 44, 47, 49], [2, 6], [3], [3, 5], [3, 6], [4], [4, 5], [4, 6], [5], [6], [7], [8, 7], [9, 7], [10, 7], [11, 7], [8], [8, 10], [8, 11], [9], [9, 10], [9, 11], [10], [11], [12], [12, 13], [12, 14], [12, 15], [12], [13], [13, 15], [13], [14], [14, 15], [14], [15]],
            {(0, 1): 47, (1, 0): 47, (0, 2): 22, (2, 0): 22, (0, 3): 79, (3, 0): 79, (0, 4): 65, (4, 0): 65, (0, 5): 43, (5, 0): 43, (0, 6): 42, (6, 0): 42, (1, 7): 18, (7, 1): 18, (1, 8): 81, (8, 1): 81, (1, 9): 92, (9, 1): 92, (1, 10): 83, (10, 1): 83, (1, 11): 60, (11, 1): 60, (2, 12): 46, (12, 2): 46, (2, 13): 59, (13, 2): 59, (2, 14): 97, (14, 2): 97, (2, 15): 95, (15, 2): 95, (2, 16): 43, (16, 2): 43, (3, 8): 96, (8, 3): 96, (3, 13): 61, (13, 3): 61, (3, 17): 24, (17, 3): 24, (3, 18): 45, (18, 3): 45, (3, 19): 26, (19, 3): 26, (4, 9): 3, (9, 4): 3, (4, 14): 10, (14, 4): 10, (4, 20): 91, (20, 4): 91, (4, 21): 76, (21, 4): 76, (4, 22): 67, (22, 4): 67, (5, 10): 63, (10, 5): 63, (5, 15): 96, (15, 5): 96, (5, 18): 18, (18, 5): 18, (5, 21): 1, (21, 5): 1, (5, 23): 1, (23, 5): 1, (6, 11): 51, (11, 6): 51, (6, 16): 9, (16, 6): 9, (6, 19): 22, (19, 6): 22, (6, 22): 10, (22, 6): 10, (6, 24): 55, (24, 6): 55, (7, 25): 38, (25, 7): 38, (7, 26): 49, (26, 7): 49, (7, 27): 61, (27, 7): 61, (7, 28): 29, (28, 7): 29, (7, 29): 66, (29, 7): 66, (8, 32): 43, (32, 8): 43, (8, 26): 56, (26, 8): 56, (8, 30): 78, (30, 8): 78, (8, 31): 49, (31, 8): 49, (9, 34): 70, (34, 9): 70, (9, 33): 8, (33, 9): 8, (9, 35): 18, (35, 9): 18, (9, 27): 22, (27, 9): 22, (10, 34): 58, (34, 10): 58, (10, 36): 42, (36, 10): 42, (10, 28): 78, (28, 10): 78, (10, 31): 58, (31, 10): 58, (11, 32): 35, (32, 11): 35, (11, 35): 91, (35, 11): 91, (11, 37): 15, (37, 11): 15, (11, 29): 70, (29, 11): 70, (12, 38): 21, (38, 12): 21, (12, 39): 21, (39, 12): 21, (12, 40): 48, (40, 12): 48, (12, 41): 63, (41, 12): 63, (12, 42): 54, (42, 12): 54, (13, 39): 34, (39, 13): 34, (13, 43): 13, (43, 13): 13, (13, 44): 44, (44, 13): 44, (13, 45): 73, (45, 13): 73, (14, 40): 50, (40, 14): 50, (14, 46): 62, (46, 14): 62, (14, 47): 77, (47, 14): 77, (14, 48): 14, (48, 14): 14, (15, 41): 51, (41, 15): 51, (15, 44): 76, (44, 15): 76, (15, 47): 98, (47, 15): 98, (15, 49): 71, (49, 15): 71},
            0,
            49,
        ),
        188,
    ),
)

def path_weight(path, w):
    D = 0
    for i in range(1, len(path)):
        D += w[(path[i - 1], path[i])]
    return D

def check(args, sol):
    (Adj, w, s, t) = args
    path = bidirectional_dijkstra(Adj, w, s, t)
    D = path_weight(path, w)
    return D == sol

class TestSolveKSquare(unittest.TestCase):
    def test_01(self):
        self.assertTrue(check(tests[0][0], tests[0][1]))

    def test_02(self):
        self.assertTrue(check(tests[1][0], tests[1][1]))

    def test_03(self):
        self.assertTrue(check(tests[2][0], tests[2][1]))

    def test_04(self):
        self.assertTrue(check(tests[3][0], tests[3][1]))
       
    def test_05(self):
        self.assertTrue(check(tests[4][0], tests[4][1]))

if __name__ == '__main__':
   res = unittest.main(verbosity = 3, exit = False)
